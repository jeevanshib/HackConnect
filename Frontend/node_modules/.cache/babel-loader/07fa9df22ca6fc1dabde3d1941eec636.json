{"ast":null,"code":"var _jsxFileName = \"/Users/jeevanshibansal/Desktop/HackConnect/Frontend/src/pages/reset/CodeVerification.js\";\nimport { Form, Formik } from \"formik\";\nimport { Link } from 'react-router-dom';\nimport LoginInput from '../../components/inputs/loginInput';\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CodeVerification(_ref) {\n  let {\n    code,\n    setCode,\n    error,\n    setError,\n    setLoading,\n    userInfos,\n    setVisible\n  } = _ref;\n  const validateCode = Yup.object({\n    code: Yup.string().required(\"Code is required.\").min(5, \"Code must be 5 characters.\").max(5, \"Code must be 5 characters.\")\n  });\n  const {\n    email\n  } = userInfos;\n\n  const verifyCode = async () => {\n    try {\n      setLoading(true);\n      await axios.post(`${process.env.REACT_APP_BACKEND_URL}/validateResetCode`, {\n        email,\n        code\n      });\n      setVisible(3);\n      setError(\"\");\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      setError(error.response.data.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative bg-primary shadow-[0_1px_2px] shadow-shadow-1 rounded-[10px] w-[450px] h-fit reset_form\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-[15px] font-semibold text-[24px] border-b-[1px] border-b-solid border-b-third reset_form_header\",\n      children: \"Code Verification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-[15px] text-[17px] reset_form_text\",\n      children: \"Please enter the text that has been sent to your email.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      enableReinitialize: true,\n      initialValues: {\n        code\n      },\n      validationSchema: validateCode,\n      onSubmit: () => {\n        verifyCode();\n      },\n      children: formik => /*#__PURE__*/_jsxDEV(Form, {\n        className: \"flex flex-col items-center\",\n        children: [/*#__PURE__*/_jsxDEV(LoginInput, {\n          type: \"text\",\n          name: \"code\",\n          onChange: e => setCode(e.target.value),\n          placeholder: \"Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error_text\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center gap-[10px] relative p-[10px] bottom-0 reset_form_btns\",\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: \"/login\",\n            className: \"w-[90px] gray-btn\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"w-[90px] blue-btn\",\n            children: \"Continue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_c = CodeVerification;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeVerification\");","map":{"version":3,"sources":["/Users/jeevanshibansal/Desktop/HackConnect/Frontend/src/pages/reset/CodeVerification.js"],"names":["Form","Formik","Link","LoginInput","Yup","axios","CodeVerification","code","setCode","error","setError","setLoading","userInfos","setVisible","validateCode","object","string","required","min","max","email","verifyCode","post","process","env","REACT_APP_BACKEND_URL","response","data","message","formik","e","target","value"],"mappings":"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","sourcesContent":["import {Form, Formik} from \"formik\";\nimport {Link} from 'react-router-dom';\nimport LoginInput from '../../components/inputs/loginInput';\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\n\n\nexport default function CodeVerification({ code, setCode, error, setError, setLoading, userInfos, setVisible }) {\n  const validateCode = Yup.object({\n    code:Yup.string().required(\"Code is required.\").min(5, \"Code must be 5 characters.\").max(5, \"Code must be 5 characters.\")\n  });\n  const { email } = userInfos;\n  const verifyCode = async() => {\n    try {\n      setLoading(true);\n      await axios.post(`${process.env.REACT_APP_BACKEND_URL}/validateResetCode`, \n      { email, code }\n      );\n      setVisible(3);\n      setError(\"\");\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      setError(error.response.data.message);\n    }\n  }\n  return (\n    <div className=\"relative bg-primary shadow-[0_1px_2px] shadow-shadow-1 rounded-[10px] w-[450px] h-fit reset_form\">\n          <div className=\"p-[15px] font-semibold text-[24px] border-b-[1px] border-b-solid border-b-third reset_form_header\">\n            Code Verification\n          </div>\n          <div className=\"p-[15px] text-[17px] reset_form_text\">\n            Please enter the text that has been sent to your email.\n          </div>\n          <Formik enableReinitialize initialValues={{\n            code,\n          }} validationSchema={validateCode} onSubmit={() => {verifyCode()}}>\n            {(formik) => (\n              <Form className='flex flex-col items-center'>\n                <LoginInput type=\"text\" name=\"code\" onChange={(e)=>setCode(e.target.value)} placeholder=\"Code\" />\n                {\n                  error && <div className=\"error_text\">{error}</div>\n                }\n                <div className=\"flex items-center gap-[10px] relative p-[10px] bottom-0 reset_form_btns\">\n                  <Link to=\"/login\" className='w-[90px] gray-btn'>Cancel</Link>\n                  <button type='submit' className='w-[90px] blue-btn'>Continue</button>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/jeevanshibansal/Desktop/HackConnect/Frontend/src/components/createPostPopup/EmojiPickerBackground.js\",\n    _s = $RefreshSig$();\n\nimport Picker from \"emoji-picker-react\";\nimport { useRef } from \"react\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function EmojiPickerBackground(_ref) {\n  _s();\n\n  let {\n    text,\n    setText,\n    user,\n    type2\n  } = _ref;\n  const [picker, setPicker] = useState(false);\n  const [cursorPosition, setCursorPosition] = useState();\n  const textRef = useRef(null);\n  useEffect(() => {\n    textRef.current.selectionEnd = cursorPosition;\n  }, [cursorPosition]);\n\n  const handleEmoji = _ref2 => {\n    let {\n      emoji\n    } = _ref2;\n    const ref = textRef.current;\n    ref.focus();\n    const start = text.substring(0, ref.selectionStart);\n    const end = text.substring(ref.selectionStart);\n    const newText = start + emoji + end;\n    setText(newText);\n    setCursorPosition(start.length + emoji.length);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      ref: textRef,\n      maxLength: 100,\n      value: text,\n      placeholder: `What's on your mind, ${user.first_name}`,\n      onChange: e => setText(e.target.value),\n      className: \"relative border-none resize-none p-[5px_15px] mb-[10px] w-[470px] ml-[1px] text-[24px] bg-primary text-primary-color min-h--[90px] overflow-y-visible post_input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative flex justify-between p-[10px_15px] items-end post_emojis_wrap\",\n      children: [picker && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute right-[-21.5rem] bottom-[-14rem] comment_emoji_picker z-50\",\n        children: /*#__PURE__*/_jsxDEV(Picker, {\n          onEmojiClick: handleEmoji\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), !type2 && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"../../../icons/colorful.png\",\n        className: \"w-[39px] cursor-pointer\",\n        alt: \"\",\n        onClick: () => {\n          setShowBgs(prev => !prev);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"hover:invert-[80%] emoji_icon_large\",\n        onClick: () => setPicker(prev => !prev)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(EmojiPickerBackground, \"WUIGZmvEmuurYQSI9QC8nn1hRZU=\");\n\n_c = EmojiPickerBackground;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmojiPickerBackground\");","map":{"version":3,"sources":["/Users/jeevanshibansal/Desktop/HackConnect/Frontend/src/components/createPostPopup/EmojiPickerBackground.js"],"names":["Picker","useRef","useEffect","useState","EmojiPickerBackground","text","setText","user","type2","picker","setPicker","cursorPosition","setCursorPosition","textRef","current","selectionEnd","handleEmoji","emoji","ref","focus","start","substring","selectionStart","end","newText","length","first_name","e","target","value","setShowBgs","prev"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,SAASC,MAAT,QAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAGA,eAAe,SAASC,qBAAT,OAA8D;AAAA;;AAAA,MAA/B;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,IAAjB;AAAuBC,IAAAA;AAAvB,GAA+B;AACzE,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACQ,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,EAApD;AACA,QAAMU,OAAO,GAAGZ,MAAM,CAAC,IAAD,CAAtB;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,OAAO,CAACC,OAAR,CAAgBC,YAAhB,GAA+BJ,cAA/B;AACD,GAFM,EAEJ,CAACA,cAAD,CAFI,CAAT;;AAGA,QAAMK,WAAW,GAAG,SAAe;AAAA,QAAd;AAAEC,MAAAA;AAAF,KAAc;AAC/B,UAAMC,GAAG,GAAGL,OAAO,CAACC,OAApB;AACAI,IAAAA,GAAG,CAACC,KAAJ;AACA,UAAMC,KAAK,GAAGf,IAAI,CAACgB,SAAL,CAAe,CAAf,EAAkBH,GAAG,CAACI,cAAtB,CAAd;AACA,UAAMC,GAAG,GAAGlB,IAAI,CAACgB,SAAL,CAAeH,GAAG,CAACI,cAAnB,CAAZ;AACA,UAAME,OAAO,GAAGJ,KAAK,GAAGH,KAAR,GAAgBM,GAAhC;AACAjB,IAAAA,OAAO,CAACkB,OAAD,CAAP;AACAZ,IAAAA,iBAAiB,CAACQ,KAAK,CAACK,MAAN,GAAeR,KAAK,CAACQ,MAAtB,CAAjB;AACD,GARH;;AASF,sBACE;AAAA,4BACA;AACI,MAAA,GAAG,EAAEZ,OADT;AAEI,MAAA,SAAS,EAAE,GAFf;AAGI,MAAA,KAAK,EAAER,IAHX;AAII,MAAA,WAAW,EAAG,wBAAuBE,IAAI,CAACmB,UAAW,EAJzD;AAKI,MAAA,QAAQ,EAAGC,CAAD,IAAOrB,OAAO,CAACqB,CAAC,CAACC,MAAF,CAASC,KAAV,CAL5B;AAMI,MAAA,SAAS,EAAC;AANd;AAAA;AAAA;AAAA;AAAA,YADA,eASA;AAAK,MAAA,SAAS,EAAC,wEAAf;AAAA,iBACCpB,MAAM,iBACH;AAAK,QAAA,SAAS,EAAC,qEAAf;AAAA,+BACA,QAAC,MAAD;AAAQ,UAAA,YAAY,EAAEO;AAAtB;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cAFJ,EAOC,CAACR,KAAD,iBACK;AACE,QAAA,GAAG,EAAC,6BADN;AAEE,QAAA,SAAS,EAAC,yBAFZ;AAGE,QAAA,GAAG,EAAC,EAHN;AAIE,QAAA,OAAO,EAAE,MAAM;AACbsB,UAAAA,UAAU,CAAEC,IAAD,IAAU,CAACA,IAAZ,CAAV;AACD;AANH;AAAA;AAAA;AAAA;AAAA,cARN,eAiBI;AACF,QAAA,SAAS,EAAC,qCADR;AAEF,QAAA,OAAO,EAAE,MAAMrB,SAAS,CAAEqB,IAAD,IAAU,CAACA,IAAZ;AAFtB;AAAA;AAAA;AAAA;AAAA,cAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YATA;AAAA,kBADF;AAmCD;;GAnDuB3B,qB;;KAAAA,qB","sourcesContent":["import Picker from \"emoji-picker-react\";\nimport { useRef } from \"react\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\n\n\nexport default function EmojiPickerBackground({ text, setText, user, type2}) {\n    const [picker, setPicker] = useState(false);\n    const [cursorPosition, setCursorPosition] = useState();\n    const textRef = useRef(null);\n    useEffect(() => {\n        textRef.current.selectionEnd = cursorPosition;\n      }, [cursorPosition]);\n    const handleEmoji = ({ emoji }) => {\n        const ref = textRef.current;\n        ref.focus();\n        const start = text.substring(0, ref.selectionStart);\n        const end = text.substring(ref.selectionStart);\n        const newText = start + emoji + end;\n        setText(newText);\n        setCursorPosition(start.length + emoji.length);\n      };\n  return (\n    <>\n    <textarea\n        ref={textRef}\n        maxLength={100}\n        value={text}\n        placeholder={`What's on your mind, ${user.first_name}`}\n        onChange={(e) => setText(e.target.value)}\n        className=\"relative border-none resize-none p-[5px_15px] mb-[10px] w-[470px] ml-[1px] text-[24px] bg-primary text-primary-color min-h--[90px] overflow-y-visible post_input\"\n    ></textarea>\n    <div className=\"relative flex justify-between p-[10px_15px] items-end post_emojis_wrap\">\n    {picker&&(\n        <div className=\"absolute right-[-21.5rem] bottom-[-14rem] comment_emoji_picker z-50\"> \n        <Picker onEmojiClick={handleEmoji}/>\n    </div>\n    )}\n    \n    {!type2 && (\n          <img\n            src=\"../../../icons/colorful.png\"\n            className=\"w-[39px] cursor-pointer\"\n            alt=\"\"\n            onClick={() => {\n              setShowBgs((prev) => !prev);\n            }}\n          />\n        )}\n        <i\n      className=\"hover:invert-[80%] emoji_icon_large\"\n      onClick={() => setPicker((prev) => !prev)}\n    ></i>\n</div>\n    </>\n    \n  )\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/jeevanshibansal/Desktop/HackConnect/Frontend/src/pages/reset/SearchAccount.js\";\nimport { Form, Formik } from \"formik\";\nimport { Link } from 'react-router-dom';\nimport LoginInput from '../../components/inputs/loginInput';\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SearchAccount(_ref) {\n  let {\n    email,\n    setEmail,\n    error,\n    setError,\n    setLoading,\n    setUserInfos,\n    setVisible\n  } = _ref;\n  const validateEmail = Yup.object({\n    email: Yup.string().required(\"Email Address is required.\").email(\"Must be a valid email address.\").max(50, \"Email address can't be more than 50 characters.\")\n  });\n\n  const handleSearch = async () => {\n    try {\n      setLoading(true);\n      const {\n        data\n      } = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/findUser`, {\n        email\n      });\n      setUserInfos(data);\n      setVisible(1);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      setError(error.response.data.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative bg-primary shadow-[0_1px_2px] shadow-shadow-1 rounded-[10px] w-[450px] h-fit reset_form\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-[15px] font-semibold text-[24px] border-b-[1px] border-b-solid border-b-third reset_form_header\",\n      children: \"Find Your Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-[15px] text-[17px] reset_form_text\",\n      children: \"Please Enter Your email address or mobile number to search for your account.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      enableReinitialize: true,\n      initialValues: {\n        email\n      },\n      validationSchema: validateEmail,\n      onSubmit: () => {\n        handleSearch();\n      },\n      children: formik => /*#__PURE__*/_jsxDEV(Form, {\n        className: \"flex flex-col items-center\",\n        children: [/*#__PURE__*/_jsxDEV(LoginInput, {\n          type: \"email\",\n          name: \"email\",\n          onChange: e => setEmail(e.target.value),\n          placeholder: \"Email Address or Phone Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error_text\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center gap-[10px] p-[10px] relative bottom-0 reset_form_btns\",\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: \"/login\",\n            className: \"w-[90px] gray-btn\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"w-[90px] blue-btn\",\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_c = SearchAccount;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchAccount\");","map":{"version":3,"sources":["/Users/jeevanshibansal/Desktop/HackConnect/Frontend/src/pages/reset/SearchAccount.js"],"names":["Form","Formik","Link","LoginInput","Yup","axios","SearchAccount","email","setEmail","error","setError","setLoading","setUserInfos","setVisible","validateEmail","object","string","required","max","handleSearch","data","post","process","env","REACT_APP_BACKEND_URL","response","message","formik","e","target","value"],"mappings":"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","sourcesContent":["import {Form, Formik} from \"formik\";\nimport {Link} from 'react-router-dom';\nimport LoginInput from '../../components/inputs/loginInput';\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\n\nexport default function SearchAccount({ email, setEmail, error, setError, setLoading, setUserInfos, setVisible }) {\n  const validateEmail = Yup.object({\n    email:Yup.string()\n    .required(\"Email Address is required.\")\n    .email(\"Must be a valid email address.\")\n    .max(50, \"Email address can't be more than 50 characters.\")\n  });\n\n  const handleSearch = async() => {\n    try {\n      setLoading(true);\n      const {data} = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/findUser`, {email});\n      setUserInfos(data);\n      setVisible(1);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      setError(error.response.data.message);\n    }\n  }\n\n  return (\n    <div className=\"relative bg-primary shadow-[0_1px_2px] shadow-shadow-1 rounded-[10px] w-[450px] h-fit reset_form\">\n          <div className=\"p-[15px] font-semibold text-[24px] border-b-[1px] border-b-solid border-b-third reset_form_header\">\n            Find Your Account\n          </div>\n          <div className=\"p-[15px] text-[17px] reset_form_text\">\n            Please Enter Your email address or mobile number to search for your account.\n          </div>\n          <Formik enableReinitialize initialValues={{\n            email\n          }} validationSchema={validateEmail} onSubmit={()=>{\n            handleSearch();\n          }}>\n            {(formik) => (\n              <Form className='flex flex-col items-center'>\n                <LoginInput type=\"email\" name=\"email\" onChange={(e)=>setEmail(e.target.value)} placeholder=\"Email Address or Phone Number\" />\n                {\n                  error && <div className=\"error_text\">{error}</div>\n                }\n                <div className=\"flex items-center gap-[10px] p-[10px] relative bottom-0 reset_form_btns\">\n                  <Link to=\"/login\" className='w-[90px] gray-btn'>Cancel</Link>\n                  <button type='submit' className='w-[90px] blue-btn'>Search</button>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}